program       = { statement } ;

statement     = assginment
              | function_definition 
              | expression 
              | return

assginment = type identifier [ "=" expression ] ";" ;

function_definition = "sub" identifier "(" [ parameter_list ] ")" [ "->" type ] block ;

parameter_list = parameter { "," parameter } ;
parameter      = identifier ":" type ;

block         = "{" { statement } [return]"}" ;

return = "ret" statement;

expression    = literal 
              | identifier 
              | binary_expression 
              | function_call 
              | block ;

binary_expression = expression binary_operator expression ;
binary_operator   = "+" | "-" | "*" | "/"  ;

function_call = identifier "(" [ argument_list ] ")" ;
argument_list = expression { "," expression } ;

type          = "i32" "str";
custom_type   = identifier ;

identifier    = letter { letter | digit | "_" } ;
literal       = integer;
integer       = digit { digit } ;
string        = "\"" { character } "\"" ;

comment       = "//" { any_character } ;
